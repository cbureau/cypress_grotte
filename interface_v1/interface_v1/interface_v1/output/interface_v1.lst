FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.40
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x23 microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0111)     // call	void_handler
0008: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0115)     // call	void_handler
000C: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0127)     // call	void_handler
0020: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 3C LJMP  _SPIS_1_ISR        (0135)     ljmp	_SPIS_1_ISR
002B: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0139)     // call	void_handler
002C: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183) IF	(TOOLCHAIN & HITECH)
                                        (0184)     ;---------------------------
                                        (0185)     ; Set up the Temporary stack
                                        (0186)     ;---------------------------
                                        (0187)     ; A temporary stack is set up for the SSC instructions.
                                        (0188)     ; The real stack start will be assigned later.
                                        (0189)     ;
                                        (0190) 	global		__Lstackps
                                        (0191) 	mov     a,low __Lstackps
                                        (0192) 	swap    a,sp
                                        (0193) ELSE
                                        (0194)     ;------------------
                                        (0195)     ; Set up the stack
                                        (0196)     ;------------------
0075: 50 03    MOV   A,0x3              (0197)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0198)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
007B: 55 FA 01 MOV   [0xFA],0x1         
007E: 4F       MOV   X,SP               
007F: 5B       MOV   A,X                
0080: 01 03    ADD   A,0x3              
0082: 53 F9    MOV   [0xF9],A           
0084: 55 F8 3A MOV   [0xF8],0x3A        
0087: 50 06    MOV   A,0x6              
0089: 00       SWI                      
008A: 71 10    OR    F,0x10             
008C: 51 F9    MOV   A,[0xF9]           
008E: 60 E8    MOV   REG[0xE8],A        
0090: 51 F8    MOV   A,[0xF8]           
0092: 60 EA    MOV   REG[0xEA],A        
0094: 70 EF    AND   F,0xEF             
                                        (0199) ENDIF
                                        (0200) 
                                        (0201)     ;-----------------------------------------------
                                        (0202)     ; Set Power-related Trim.
                                        (0203)     ;-----------------------------------------------
                                        (0204) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0205) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0206)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0207)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0208)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0209)  ENDIF
                                        (0210) ENDIF ; 5.0 V Operation
                                        (0211) 
                                        (0212) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0213)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0214)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0215)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0216)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0217)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0218)  ENDIF
                                        (0219) ENDIF ; 3.3 Volt Operation
                                        (0220) 
                                        (0221) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0222)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0223)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0224) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0225) 
                                        (0226) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0227)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0228)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0229) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0230) 
0096: 55 F8 00 MOV   [0xF8],0x0         (0231)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0099: 55 F9 00 MOV   [0xF9],0x0         (0232)     mov  [bSSC_KEYSP], 0
009C: 71 10    OR    F,0x10             
                                        (0233) 
                                        (0234)     ;---------------------------------------
                                        (0235)     ; Initialize Crystal Oscillator and PLL
                                        (0236)     ;---------------------------------------
                                        (0237) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0238)     M8C_SetBank1
                                        (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0244)     M8C_SetBank1
009E: 62 E0 02 MOV   REG[0xE0],0x2      (0245)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00A1: 70 EF    AND   F,0xEF             
00A3: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     M8C_SetBank0
                                        (0247)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0248) 
                                        (0249) ENDIF
                                        (0250) 
                                        (0251)     ;-------------------------------------------------------
                                        (0252)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0253)     ;-------------------------------------------------------
                                        (0254) 
                                        (0255)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0256) 
                                        (0257) IF (SYSCLK_SOURCE)
                                        (0258)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0259) ENDIF
                                        (0260)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0261) 
                                        (0262)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0263)     ;---------------------------------------------------
                                        (0264)     ; Insert your custom code below this banner
                                        (0265)     ;---------------------------------------------------
                                        (0266) 
                                        (0267)     ;---------------------------------------------------
                                        (0268)     ; Insert your custom code above this banner
                                        (0269)     ;---------------------------------------------------
                                        (0270)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0271) 
                                        (0272)     ;-------------------------
                                        (0273)     ; Load Base Configuration
                                        (0274)     ;-------------------------
                                        (0275)     ; Load global parameter settings and load the user modules in the
                                        (0276)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0277)     ; to minimize start up time; (2) We may still need to play with the
                                        (0278)     ; Sleep Timer.
                                        (0279)     ;
00A6: 7C 01 DB LCALL 0x01DB             (0280)     lcall LoadConfigInit
                                        (0281) 
                                        (0282)     ;-----------------------------------
                                        (0283)     ; Initialize C Run-Time Environment
                                        (0284)     ;-----------------------------------
                                        (0285) IF ( C_LANGUAGE_SUPPORT )
00A9: 50 00    MOV   A,0x0              (0286)     mov  A,0                           ; clear the 'bss' segment to zero
00AB: 55 01 03 MOV   [__r0],0x3         (0287)     mov  [__r0],<__bss_start
                                        (0288) BssLoop:
00AE: 3C 01 03 CMP   [__r0],0x3         (0289)     cmp  [__r0],<__bss_end
00B1: A0 05    JZ    0x00B7             (0290)     jz   BssDone
00B3: 3F 01    MVI   [__r0],A           (0291)     mvi  [__r0],A
00B5: 8F F8    JMP   0x00AE             (0292)     jmp  BssLoop
                                        (0293) BssDone:
00B7: 50 01    MOV   A,0x1              (0294)     mov  A,>__idata_start              ; copy idata to data segment
00B9: 57 96    MOV   X,0x96             (0295)     mov  X,<__idata_start
00BB: 55 01 00 MOV   [__r0],0x0         (0296)     mov  [__r0],<__data_start
                                        (0297) IDataLoop:
00BE: 3C 01 00 CMP   [__r0],0x0         (0298)     cmp  [__r0],<__data_end
00C1: A0 0B    JZ    0x00CD             (0299)     jz   C_RTE_Done
00C3: 08       PUSH  A                  (0300)     push A
00C4: 28       ROMX                     (0301)     romx
00C5: 3F 01    MVI   [__r0],A           (0302)     mvi  [__r0],A
00C7: 18       POP   A                  (0303)     pop  A
00C8: 75       INC   X                  (0304)     inc  X
00C9: 09 00    ADC   A,0x0              (0305)     adc  A,0
00CB: 8F F2    JMP   0x00BE             (0306)     jmp  IDataLoop
00CD: 71 10    OR    F,0x10             
                                        (0307) 
                                        (0308) C_RTE_Done:
                                        (0309) 
                                        (0310) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0311) 
                                        (0312)     ;-------------------------------
                                        (0313)     ; Voltage Stabilization for SMP
                                        (0314)     ;-------------------------------
                                        (0315) 
                                        (0316) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0317) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0318)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0319)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0320)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0321)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0322)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0323)     M8C_SetBank1
                                        (0324)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0325)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0328)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0329) .WaitFor2ms:
                                        (0330)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0331)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0332) ENDIF ; SMP is operational
                                        (0333) ENDIF ; 5.0V Operation
                                        (0334) 
                                        (0335)     ;-------------------------------
                                        (0336)     ; Set Power-On Reset (POR) Level
                                        (0337)     ;-------------------------------
                                        (0338)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0339)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0340)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0341)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0342)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0343) 
                                        (0344)     M8C_SetBank1
                                        (0345) 
                                        (0346) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0347)                                                ;  Yes, lowest trip already set
                                        (0348) ELSE                                           ;   No, must adjust POR...
                                        (0349) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
00CF: 43 E3 10 OR    REG[0xE3],0x10     (0350)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
00D2: 70 EF    AND   F,0xEF             
                                        (0351) ELSE
                                        (0352) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0353)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0354)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0355)  ELSE                                          ;    No, fast mode
                                        (0356)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0357)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0358)   ELSE ; 24HMz                                 ;
                                        (0359)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0360)   ENDIF ; 24MHz
                                        (0361)  ENDIF ; Slow Mode
                                        (0362) ENDIF ; 5.0V Operation
                                        (0363) ENDIF ; 3.3V Operation
                                        (0364) ENDIF ; 2.7V Operation
                                        (0365) 
                                        (0366)     M8C_SetBank0
                                        (0367) 
                                        (0368)     ;----------------------------
                                        (0369)     ; Wrap up and invoke "main"
                                        (0370)     ;----------------------------
                                        (0371) 
                                        (0372)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0373)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0374)     ;
00D4: 62 E0 00 MOV   REG[0xE0],0x0      (0375)     mov  reg[INT_MSK0],0
00D7: 71 10    OR    F,0x10             
                                        (0376) 
                                        (0377)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0378)     ;
                                        (0379)     M8C_SetBank1
00D9: 62 E0 03 MOV   REG[0xE0],0x3      (0380)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00DC: 70 EF    AND   F,0xEF             
                                        (0381)     M8C_SetBank0
                                        (0382) 
                                        (0383)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0384)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0385)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0386)     ;
00DE: 62 E2 00 MOV   REG[0xE2],0x0      (0387)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0388)                                    ; have been set during the boot process.
                                        (0389) IF	(TOOLCHAIN & HITECH)
                                        (0390) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0391) ELSE
                                        (0392) IF ENABLE_LJMP_TO_MAIN
                                        (0393)     ljmp  _main                    ; goto main (no return)
                                        (0394) ELSE
00E1: 7C 03 0A LCALL __UserModules_end|__text_start|_main|_main(0395)     lcall _main                    ; call main
                                        (0396) .Exit:
00E4: 8F FF    JMP   0x00E4             (0397)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0398) ENDIF
                                        (0399) ENDIF ; TOOLCHAIN
                                        (0400) 
                                        (0401)     ;---------------------------------
                                        (0402)     ; Library Access to Global Parms
                                        (0403)     ;---------------------------------
                                        (0404)     ;
                                        (0405)  bGetPowerSetting:
                                        (0406) _bGetPowerSetting:
                                        (0407)     ; Returns value of POWER_SETTING in the A register.
                                        (0408)     ; No inputs. No Side Effects.
                                        (0409)     ;
                                        (0410) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0411)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0412) ELSE
00E6: 50 08    MOV   A,0x8              (0413)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0414) ENDIF
00E8: 7F       RET                      (0415)     ret
                                        (0416) 
                                        (0417) IF	(TOOLCHAIN & HITECH)
                                        (0418) ELSE
                                        (0419)     ;---------------------------------
                                        (0420)     ; Order Critical RAM & ROM AREAs
                                        (0421)     ;---------------------------------
                                        (0422)     ;  'TOP' is all that has been defined so far...
                                        (0423) 
                                        (0424)     ;  ROM AREAs for C CONST, static & global items
                                        (0425)     ;
                                        (0426)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0427)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0428) __idata_start:
                                        (0429) 
                                        (0430)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0431) __func_lit_start:
                                        (0432) 
                                        (0433)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0434)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0435) 
                                        (0436)     ; CODE segment for general use
                                        (0437)     ;
                                        (0438)     AREA text (ROM, REL, CON)
                                        (0439) __text_start:
                                        (0440) 
                                        (0441)     ; RAM area usage
                                        (0442)     ;
                                        (0443)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0444) __data_start:
                                        (0445) 
                                        (0446)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0447)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0448)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0449) __bss_start:
                                        (0450) 
                                        (0451) ENDIF ; TOOLCHAIN
                                        (0452) 
                                        (0453) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0196: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_telecommande_clem_2_Bank1
                                        (0019) export LoadConfigTBL_telecommande_clem_2_Bank0
                                        (0020) export LoadConfigTBL_telecommande_clem_2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_telecommande_clem_2_Bank0:
                                        (0023) ;  Instance name BP4, User Module LED
                                        (0024) ;  Instance name BP6, User Module LED
                                        (0025) ;  Instance name BP7, User Module LED
                                        (0026) ;  Instance name ONOFF, User Module LED
                                        (0027) ;  Instance name SPIS_1, User Module SPIS
                                        (0028) ;       Instance name SPIS_1, Block Name SPIS(DCB02)
                                        (0029) 	db		2bh, 00h		;SPIS_1_CONTROL_REG  (DCB02CR0)
                                        (0030) 	db		29h, 00h		;SPIS_1_TX_BUFFER_REG(DCB02DR1)
                                        (0031) 	db		2ah, 00h		;SPIS_1_RX_BUFFER_REG(DCB02DR2)
                                        (0032) ;  Global Register values Bank 0
                                        (0033) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0034) 	db		64h, 00h		; AnalogComparatorControl0 register (CMP_CR0)
                                        (0035) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0036) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0037) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0038) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0039) 	db		62h, 00h		; PWM_Control register (PWM_CR)
                                        (0040) 	db		b0h, 64h		; Row_0_InputMux register (RDI0RI)
                                        (0041) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0042) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0043) 	db		b3h, 31h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0044) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0045) 	db		b5h, 02h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0046) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0047) 	db		ffh
                                        (0048) LoadConfigTBL_telecommande_clem_2_Bank1:
                                        (0049) ;  Instance name BP4, User Module LED
                                        (0050) ;  Instance name BP6, User Module LED
                                        (0051) ;  Instance name BP7, User Module LED
                                        (0052) ;  Instance name ONOFF, User Module LED
                                        (0053) ;  Instance name SPIS_1, User Module SPIS
                                        (0054) ;       Instance name SPIS_1, Block Name SPIS(DCB02)
                                        (0055) 	db		28h, 0eh		;SPIS_1_FUNCTION_REG (DCB02FN)
                                        (0056) 	db		29h, fdh		;SPIS_1_INPUT_REG    (DCB02IN)
                                        (0057) 	db		2ah, 2fh		;SPIS_1_OUTPUT_REG   (DCB02OU)
                                        (0058) ;  Global Register values Bank 1
                                        (0059) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0060) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0061) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0062) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0063) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0064) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0065) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0066) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0067) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0068) 	db		e1h, dfh		; OscillatorControl_1 register (OSC_CR1)
                                        (0069) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0070) 	db		dfh, c7h		; OscillatorControl_3 register (OSC_CR3)
                                        (0071) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0072) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0073) 	db		ffh
                                        (0074) AREA psoc_config(rom, rel)
                                        (0075) LoadConfigTBL_telecommande_clem_2_Ordered:
                                        (0076) ;  Ordered Global Register values
                                        (0077) 	M8C_SetBank0
0198: 62 00 00 MOV   REG[0x0],0x0       (0078) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
019B: 71 10    OR    F,0x10             
                                        (0079) 	M8C_SetBank1
019D: 62 00 5E MOV   REG[0x0],0x5E      (0080) 	mov	reg[00h], 5eh		; Port_0_DriveMode_0 register (PRT0DM0)
01A0: 62 01 A1 MOV   REG[0x1],0xA1      (0081) 	mov	reg[01h], a1h		; Port_0_DriveMode_1 register (PRT0DM1)
01A3: 70 EF    AND   F,0xEF             
                                        (0082) 	M8C_SetBank0
01A5: 62 03 00 MOV   REG[0x3],0x0       (0083) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
01A8: 62 02 A8 MOV   REG[0x2],0xA8      (0084) 	mov	reg[02h], a8h		; Port_0_GlobalSelect register (PRT0GS)
01AB: 71 10    OR    F,0x10             
                                        (0085) 	M8C_SetBank1
01AD: 62 02 00 MOV   REG[0x2],0x0       (0086) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01B0: 62 03 00 MOV   REG[0x3],0x0       (0087) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01B3: 70 EF    AND   F,0xEF             
                                        (0088) 	M8C_SetBank0
01B5: 62 01 00 MOV   REG[0x1],0x0       (0089) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01B8: 62 04 00 MOV   REG[0x4],0x0       (0090) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01BB: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
01BD: 62 04 00 MOV   REG[0x4],0x0       (0092) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01C0: 62 05 17 MOV   REG[0x5],0x17      (0093) 	mov	reg[05h], 17h		; Port_1_DriveMode_1 register (PRT1DM1)
01C3: 70 EF    AND   F,0xEF             
                                        (0094) 	M8C_SetBank0
01C5: 62 07 03 MOV   REG[0x7],0x3       (0095) 	mov	reg[07h], 03h		; Port_1_DriveMode_2 register (PRT1DM2)
01C8: 62 06 00 MOV   REG[0x6],0x0       (0096) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01CB: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
01CD: 62 06 00 MOV   REG[0x6],0x0       (0098) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01D0: 62 07 00 MOV   REG[0x7],0x0       (0099) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01D3: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
01D5: 62 05 00 MOV   REG[0x5],0x0       (0101) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01D8: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
01DA: 7F       RET                      (0103) 	ret
                                        (0104) 
                                        (0105) 
                                        (0106) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_telecommande_clem_2
                                        (0026) export _LoadConfig_telecommande_clem_2
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
01DB: 55 02 00 MOV   [0x2],0x0          (0061) 	mov		[Port_0_Data_SHADE], 0h
                                        (0062) 
01DE: 7C 01 E5 LCALL 0x01E5             (0063) 	lcall	LoadConfig_telecommande_clem_2
01E1: 7C 01 96 LCALL 0x0196             (0064) 	lcall	LoadConfigTBL_telecommande_clem_2_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
01E4: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration telecommande_clem_2
                                        (0072) ;
                                        (0073) ;    Load configuration registers for telecommande_clem_2.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_telecommande_clem_2:
                                        (0090)  LoadConfig_telecommande_clem_2:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
01E5: 10       PUSH  X                  (0093) 	push	x
01E6: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
01E8: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
01EA: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
01EB: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_telecommande_clem_2_Bank0
01ED: 57 50    MOV   X,0x50             (0099)     mov     X, <LoadConfigTBL_telecommande_clem_2_Bank0
01EF: 7C 02 00 LCALL 0x0200             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
01F2: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
01F4: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
01F5: 50 01    MOV   A,0x1              (0105)     mov     A, >LoadConfigTBL_telecommande_clem_2_Bank1
01F7: 57 73    MOV   X,0x73             (0106)     mov     X, <LoadConfigTBL_telecommande_clem_2_Bank1
01F9: 7C 02 00 LCALL 0x0200             (0107)     lcall   LoadConfig              ; Load the bank 1 values
01FC: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
01FE: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
01FF: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0200: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
0202: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
0203: 08       PUSH  A                  (0137)     push    A
0204: 4F       MOV   X,SP               (0138)     mov     X, SP
0205: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0208: D0 04    JNC   0x020D             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
020A: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
020D: 18       POP   A                  (0143)     pop     A
020E: 20       POP   X                  (0144)     pop     X
020F: 70 EF    AND   F,0xEF             
0211: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0214: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
0215: 08       PUSH  A                  (0150)     push    A
0216: 28       ROMX                     (0151)     romx                            ; Load register address from table
0217: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0219: A0 1F    JZ    0x0239             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
021B: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
021C: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
021F: A0 03    JZ    0x0223             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0221: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
0223: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
0225: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
0226: 20       POP   X                  (0161)     pop     X
0227: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0228: 09 00    ADC   A,0x0              (0163)     adc     A, 0
022A: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
022B: 08       PUSH  A                  (0165)     push    A
022C: 28       ROMX                     (0166)     romx                            ; load config data from the table
022D: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
022E: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0230: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
0232: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
0233: 20       POP   X                  (0171)     pop     X
0234: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
0235: 09 00    ADC   A,0x0              (0173)     adc     A, 0
0237: 8F D7    JMP   0x020F             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0239: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
023B: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_0_Data_SHADE:
                                        (0186) Port_0_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\spis_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIS_1INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;     Interrupt handler routine for SPIS user module instance: SPIS_1.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "SPIS_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _SPIS_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _SPIS_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _SPIS_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
023C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file SPIS_1INT.asm
FILE: lib\spis_1.asm                    (0001) ;;*****************************************************************************
023D: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIS_1.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIS User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIS_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIS_1_EnableInt
                                        (0030) export  _SPIS_1_EnableInt
                                        (0031) export   SPIS_1_DisableInt
                                        (0032) export  _SPIS_1_DisableInt
                                        (0033) export   SPIS_1_Start
                                        (0034) export  _SPIS_1_Start
                                        (0035) export   SPIS_1_Stop
                                        (0036) export  _SPIS_1_Stop
                                        (0037) export   SPIS_1_SetupTxData
                                        (0038) export  _SPIS_1_SetupTxData
                                        (0039) export   SPIS_1_bReadRxData
                                        (0040) export  _SPIS_1_bReadRxData
                                        (0041) export   SPIS_1_bReadStatus
                                        (0042) export  _SPIS_1_bReadStatus
                                        (0043) 
                                        (0044) IF (SPIS_1_SW_SS_Feature)
                                        (0045) export   SPIS_1_DisableSS
                                        (0046) export  _SPIS_1_DisableSS
                                        (0047) export   SPIS_1_EnableSS
                                        (0048) export  _SPIS_1_EnableSS
                                        (0049) 
                                        (0050) export   SPIS_1_SetSS	             ; Deprecated
                                        (0051) export  _SPIS_1_SetSS              ; Deprecated
                                        (0052) export   SPIS_1_ClearSS            ; Deprecated
                                        (0053) export  _SPIS_1_ClearSS            ; Deprecated
                                        (0054) ENDIF
                                        (0055) 
                                        (0056) ;  Old exports.  Will be removed in future release.
                                        (0057) ;  Do not use
                                        (0058) export   bSPIS_1_ReadRxData
                                        (0059) export  _bSPIS_1_ReadRxData
                                        (0060) export   bSPIS_1_ReadStatus
                                        (0061) export  _bSPIS_1_ReadStatus
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ;  Constant Definitions
                                        (0065) ;-----------------------------------------------
                                        (0066) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0067) 
                                        (0068) 
                                        (0069) area UserModules (ROM, REL)
                                        (0070) 
                                        (0071) 
                                        (0072) .SECTION
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;  FUNCTION NAME: SPIS_1_EnableInt
                                        (0075) ;
                                        (0076) ;  DESCRIPTION:
                                        (0077) ;     Enables the SPIS interrupt by setting the interrupt enable mask
                                        (0078) ;     bit associated with this User Module.
                                        (0079) ;
                                        (0080) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0081) ;
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;
                                        (0084) ;  ARGUMENTS: none
                                        (0085) ;
                                        (0086) ;  RETURNS: none
                                        (0087) ;
                                        (0088) ;  SIDE EFFECTS: 
                                        (0089) ;    The A and X registers may be modified by this or future implementations
                                        (0090) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0091) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0092) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0093) ;    functions.
                                        (0094) ;
                                        (0095)  SPIS_1_EnableInt:
                                        (0096) _SPIS_1_EnableInt:
                                        (0097)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0098)    M8C_EnableIntMask SPIS_1_INT_REG, SPIS_1_bINT_MASK
                                        (0099)    RAM_EPILOGUE RAM_USE_CLASS_1
0240: 7F       RET                      (0100)    ret
0241: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0101) 
                                        (0102) .ENDSECTION
                                        (0103) 
                                        (0104) .SECTION
                                        (0105) ;-----------------------------------------------------------------------------
                                        (0106) ;  FUNCTION NAME: SPIS_1_DisableInt
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;     Disables this SPIS's interrupt by clearing the interrupt enable mask bit
                                        (0110) ;     associated with this User Module.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:  none
                                        (0115) ;
                                        (0116) ;  RETURNS: none
                                        (0117) ;
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  SPIS_1_DisableInt:
                                        (0126) _SPIS_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    M8C_DisableIntMask   SPIS_1_INT_REG, SPIS_1_bINT_MASK
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0244: 7F       RET                      (0130)    ret
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: SPIS_1_Start
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIS
                                        (0140) ;     user module.
                                        (0141) ;
                                        (0142) ;     SPIS User Module will be ready to receive data, when an SPI Master initiates
                                        (0143) ;
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;
                                        (0146) ;  ARGUMENTS:
                                        (0147) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0148) ;           Use defined masks - masks can be OR'd together.
                                        (0149) ;     PASSED in Accumulator.
                                        (0150) ;
                                        (0151) ;  RETURNS:  none
                                        (0152) ;
                                        (0153) ;  SIDE EFFECTS: 
                                        (0154) ;    The A and X registers may be modified by this or future implementations
                                        (0155) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0156) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0157) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0158) ;    functions.
                                        (0159) ;
                                        (0160)  SPIS_1_Start:
                                        (0161) _SPIS_1_Start:
                                        (0162)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0163)    ; setup the SPIS configuration setting
0245: 29 01    OR    A,0x1              (0164)    or    A, bfCONTROL_REG_START_BIT
0247: 60 2B    MOV   REG[0x2B],A        (0165)    mov   REG[SPIS_1_CONTROL_REG], A
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_1
0249: 7F       RET                      (0167)    ret
                                        (0168) 
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: SPIS_1_Stop
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;     Disables SPIS operation, and de-asserts the slave select signals.
                                        (0177) ;
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;
                                        (0180) ;  ARGUMENTS:  none
                                        (0181) ;
                                        (0182) ;  RETURNS:  none
                                        (0183) ;
                                        (0184) ;  SIDE EFFECTS: 
                                        (0185) ;    The A and X registers may be modified by this or future implementations
                                        (0186) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0187) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0188) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0189) ;    functions.
                                        (0190) ;
                                        (0191)  SPIS_1_Stop:
                                        (0192) _SPIS_1_Stop:
                                        (0193)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0194)    ; clear the SPIS stop bits
024A: 41 2B FE AND   REG[0x2B],0xFE     (0195)    and   REG[SPIS_1_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0196)    RAM_EPILOGUE RAM_USE_CLASS_1
024D: 7F       RET                      (0197)    ret
                                        (0198) 
                                        (0199) .ENDSECTION
                                        (0200) 
                                        (0201) .SECTION
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;  FUNCTION NAME: SPIS_1_SetupTxData
                                        (0204) ;
                                        (0205) ;  DESCRIPTION:
                                        (0206) ;     Loads data into the SPI Tx Buffer in readiness for an SPI Tx/Rx cycle.
                                        (0207) ;
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;
                                        (0210) ;  ARGUMENTS:
                                        (0211) ;     BYTE  bTxData - data to transmit.
                                        (0212) ;        Passed in A register
                                        (0213) ;
                                        (0214) ;  RETURNS:  none
                                        (0215) ;
                                        (0216) ;  SIDE EFFECTS: 
                                        (0217) ;    The A and X registers may be modified by this or future implementations
                                        (0218) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0219) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0220) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0221) ;    functions.
                                        (0222) ;
                                        (0223)  SPIS_1_SetupTxData:
                                        (0224) _SPIS_1_SetupTxData:
                                        (0225)    RAM_PROLOGUE RAM_USE_CLASS_1
024E: 60 29    MOV   REG[0x29],A        (0226)    mov REG[SPIS_1_TX_BUFFER_REG], A
                                        (0227)    RAM_EPILOGUE RAM_USE_CLASS_1
0250: 7F       RET                      (0228)    ret
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: SPIS_1_bReadRxData
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0238) ;     sure data is valid.
                                        (0239) ;
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;
                                        (0242) ;  ARGUMENTS:  none
                                        (0243) ;
                                        (0244) ;  RETURNS:
                                        (0245) ;     bRxData - returned in A.
                                        (0246) ;
                                        (0247) ;  SIDE EFFECTS: 
                                        (0248) ;    The A and X registers may be modified by this or future implementations
                                        (0249) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0250) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0251) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0252) ;    functions.
                                        (0253) ;
                                        (0254)  SPIS_1_bReadRxData:
                                        (0255) _SPIS_1_bReadRxData:
                                        (0256)  bSPIS_1_ReadRxData:
                                        (0257) _bSPIS_1_ReadRxData:
                                        (0258)    RAM_PROLOGUE RAM_USE_CLASS_1
0251: 5D 2A    MOV   A,REG[0x2A]        (0259)    mov A, REG[SPIS_1_RX_BUFFER_REG]
                                        (0260)    RAM_EPILOGUE RAM_USE_CLASS_1
0253: 7F       RET                      (0261)    ret
                                        (0262) 
                                        (0263) .ENDSECTION
                                        (0264) 
                                        (0265) .SECTION
                                        (0266) ;-----------------------------------------------------------------------------
                                        (0267) ;  FUNCTION NAME: SPIS_1_bReadStatus
                                        (0268) ;
                                        (0269) ;  DESCRIPTION:
                                        (0270) ;     Reads the SPIS Status bits in the Control/Status register.
                                        (0271) ;
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;
                                        (0274) ;  ARGUMENTS:  none
                                        (0275) ;
                                        (0276) ;  RETURNS:
                                        (0277) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0278) ;        Returned in Accumulator.
                                        (0279) ;
                                        (0280) ;  SIDE EFFECTS: 
                                        (0281) ;    The A and X registers may be modified by this or future implementations
                                        (0282) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0283) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0284) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0285) ;    functions.
                                        (0286) ;
                                        (0287)  SPIS_1_bReadStatus:
                                        (0288) _SPIS_1_bReadStatus:
                                        (0289)  bSPIS_1_ReadStatus:
                                        (0290) _bSPIS_1_ReadStatus:
                                        (0291)    RAM_PROLOGUE RAM_USE_CLASS_1
0254: 5D 2B    MOV   A,REG[0x2B]        (0292)    mov A,  REG[SPIS_1_CONTROL_REG]
                                        (0293)    RAM_EPILOGUE RAM_USE_CLASS_1
0256: 7F       RET                      (0294)    ret
0257: 71 10    OR    F,0x10             
                                        (0295) 
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) IF (SPIS_1_SW_SS_Feature)
                                        (0299) 
                                        (0300) .SECTION
                                        (0301) ;-----------------------------------------------------------------------------
                                        (0302) ;  FUNCTION NAME: SPIS_1_DisableSS
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:
                                        (0305) ;     Set the active-low "SS" Slave Select signal to the HIGH state
                                        (0306) ;     via firmware
                                        (0307) ;
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;
                                        (0310) ;  ARGUMENTS:  none
                                        (0311) ;
                                        (0312) ;  RETURNS: none
                                        (0313) ;
                                        (0314) ;  SIDE EFFECTS:
                                        (0315) ;    The A and X registers may be modified by this or future implementations
                                        (0316) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0317) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0318) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0319) ;    functions.
                                        (0320) ;
                                        (0321) ;    If the software slave select mode is not enabled.  This function
                                        (0322) ;    may change the hardware SS input signal.
                                        (0323) ;
                                        (0324)  SPIS_1_DisableSS:
                                        (0325) _SPIS_1_DisableSS:
                                        (0326)  SPIS_1_SetSS:		; This name deprecated
                                        (0327) _SPIS_1_SetSS:		; This name deprecated
                                        (0328)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0329)    M8C_SetBank1
0259: 43 2A 08 OR    REG[0x2A],0x8      (0330)    or  reg[SPIS_1_OUTPUT_REG],SPIS_1_SPIS_SLAVE_SELECT
025C: 70 EF    AND   F,0xEF             
                                        (0331)    M8C_SetBank0
                                        (0332)    RAM_EPILOGUE RAM_USE_CLASS_1
025E: 7F       RET                      (0333)    ret
025F: 71 10    OR    F,0x10             
                                        (0334) 
                                        (0335) .ENDSECTION
                                        (0336) 
                                        (0337) .SECTION
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;  FUNCTION NAME: SPIS_1_EnableSS
                                        (0340) ;
                                        (0341) ;  DESCRIPTION:
                                        (0342) ;     Set the active-low "SS" Slave select signal to the LOW state
                                        (0343) ;     via firmware
                                        (0344) ;
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;
                                        (0347) ;  ARGUMENTS:  none
                                        (0348) ;
                                        (0349) ;  RETURNS: none
                                        (0350) ;
                                        (0351) ;  SIDE EFFECTS:   
                                        (0352) ;    The A and X registers may be modified by this or future implementations
                                        (0353) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0354) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0355) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0356) ;    functions.
                                        (0357) ;
                                        (0358) ;    If the software slave select mode is not enabled.  This function
                                        (0359) ;    may change the hardware SS input signal.
                                        (0360) ;
                                        (0361)  SPIS_1_EnableSS:
                                        (0362) _SPIS_1_EnableSS:
                                        (0363)  SPIS_1_ClearSS:		; This name deprecated
                                        (0364) _SPIS_1_ClearSS:		; This name deprecated
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0366)    M8C_SetBank1
0261: 41 2A F7 AND   REG[0x2A],0xF7     (0367)    and  reg[SPIS_1_OUTPUT_REG],~SPIS_1_SPIS_SLAVE_SELECT
0264: 70 EF    AND   F,0xEF             
                                        (0368)    M8C_SetBank0
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_1
0266: 7F       RET                      (0370)    ret
                                        (0371) 
                                        (0372) .ENDSECTION
                                        (0373) 
                                        (0374) ENDIF
                                        (0375) 
                                        (0376) ; End of File SPIS_1.asm
                                        (0377) 
FILE: lib\onoff.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ONOFF.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "ONOFF.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _ONOFF_Start
                                        (0027) export  ONOFF_Start
                                        (0028) 
                                        (0029) export _ONOFF_Stop
                                        (0030) export  ONOFF_Stop
                                        (0031) 
                                        (0032) export _ONOFF_On
                                        (0033) export  ONOFF_On
                                        (0034) 
                                        (0035) export _ONOFF_Off
                                        (0036) export  ONOFF_Off
                                        (0037) 
                                        (0038) export _ONOFF_Switch
                                        (0039) export  ONOFF_Switch
                                        (0040) 
                                        (0041) export _ONOFF_Invert
                                        (0042) export  ONOFF_Invert
                                        (0043) 
                                        (0044) export _ONOFF_GetState
                                        (0045) export  ONOFF_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: ONOFF_Start(void)
                                        (0054) ;  FUNCTION NAME: ONOFF_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: ONOFF_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _ONOFF_On:
                                        (0079)  ONOFF_On:
0267: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0269: 80 03    JMP   _ONOFF_Switch      (0081)    jmp  ONOFF_Switch 
                                        (0082) 
                                        (0083) _ONOFF_Start:
                                        (0084)  ONOFF_Start:
                                        (0085) _ONOFF_Stop:
                                        (0086)  ONOFF_Stop:
                                        (0087) _ONOFF_Off:
                                        (0088)  ONOFF_Off:
026B: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _ONOFF_Switch:
                                        (0092)  ONOFF_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
026D: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
026F: A0 06    JZ    0x0276             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0271: 2E 02 02 OR    [0x2],0x2          (0102)    or   [Port_0_Data_SHADE],ONOFF_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_0_Data_SHADE],~ONOFF_PinMask
                                        (0105) ENDIF
0274: 80 04    JMP   0x0279             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0276: 26 02 FD AND   [0x2],0xFD         (0110)    and  [Port_0_Data_SHADE],~ONOFF_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_0_Data_SHADE],ONOFF_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0279: 51 02    MOV   A,[0x2]            (0116)    mov  A,[Port_0_Data_SHADE]
027B: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[ONOFF_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
027D: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: ONOFF_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _ONOFF_Invert:
                                        (0144)  ONOFF_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
027E: 36 02 02 XOR   [0x2],0x2          (0149)    xor  [Port_0_Data_SHADE],ONOFF_PinMask
0281: 51 02    MOV   A,[0x2]            (0150)    mov  A,[Port_0_Data_SHADE]
0283: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[ONOFF_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0285: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: ONOFF_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _ONOFF_GetState:
                                        (0177)  ONOFF_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0286: 51 02    MOV   A,[0x2]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0288: 21 02    AND   A,0x2              (0188)    and   A,ONOFF_PinMask               ; Mask off the trash
028A: A0 03    JZ    0x028E             (0189)    jz    .End_LED_GS                   ; If zero, we're done
028C: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
028E: 7F       RET                      (0195)    ret
FILE: lib\bp7.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   BP7.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "BP7.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _BP7_Start
                                        (0027) export  BP7_Start
                                        (0028) 
                                        (0029) export _BP7_Stop
                                        (0030) export  BP7_Stop
                                        (0031) 
                                        (0032) export _BP7_On
                                        (0033) export  BP7_On
                                        (0034) 
                                        (0035) export _BP7_Off
                                        (0036) export  BP7_Off
                                        (0037) 
                                        (0038) export _BP7_Switch
                                        (0039) export  BP7_Switch
                                        (0040) 
                                        (0041) export _BP7_Invert
                                        (0042) export  BP7_Invert
                                        (0043) 
                                        (0044) export _BP7_GetState
                                        (0045) export  BP7_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: BP7_Start(void)
                                        (0054) ;  FUNCTION NAME: BP7_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: BP7_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _BP7_On:
                                        (0079)  BP7_On:
028F: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0291: 80 03    JMP   _BP7_Switch        (0081)    jmp  BP7_Switch 
                                        (0082) 
                                        (0083) _BP7_Start:
                                        (0084)  BP7_Start:
                                        (0085) _BP7_Stop:
                                        (0086)  BP7_Stop:
                                        (0087) _BP7_Off:
                                        (0088)  BP7_Off:
0293: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _BP7_Switch:
                                        (0092)  BP7_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
0295: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0297: A0 06    JZ    0x029E             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_0_Data_SHADE],BP7_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0299: 26 02 EF AND   [0x2],0xEF         (0104)    and  [Port_0_Data_SHADE],~BP7_PinMask
                                        (0105) ENDIF
029C: 80 04    JMP   0x02A1             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_0_Data_SHADE],~BP7_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
029E: 2E 02 10 OR    [0x2],0x10         (0112)    or   [Port_0_Data_SHADE],BP7_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02A1: 51 02    MOV   A,[0x2]            (0116)    mov  A,[Port_0_Data_SHADE]
02A3: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[BP7_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02A5: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: BP7_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _BP7_Invert:
                                        (0144)  BP7_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02A6: 36 02 10 XOR   [0x2],0x10         (0149)    xor  [Port_0_Data_SHADE],BP7_PinMask
02A9: 51 02    MOV   A,[0x2]            (0150)    mov  A,[Port_0_Data_SHADE]
02AB: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[BP7_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02AD: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: BP7_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _BP7_GetState:
                                        (0177)  BP7_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
02AE: 51 02    MOV   A,[0x2]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
02B0: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
02B1: 21 10    AND   A,0x10             (0188)    and   A,BP7_PinMask                 ; Mask off the trash
02B3: A0 03    JZ    0x02B7             (0189)    jz    .End_LED_GS                   ; If zero, we're done
02B5: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
02B7: 7F       RET                      (0195)    ret
FILE: lib\bp6.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   BP6.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "BP6.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _BP6_Start
                                        (0027) export  BP6_Start
                                        (0028) 
                                        (0029) export _BP6_Stop
                                        (0030) export  BP6_Stop
                                        (0031) 
                                        (0032) export _BP6_On
                                        (0033) export  BP6_On
                                        (0034) 
                                        (0035) export _BP6_Off
                                        (0036) export  BP6_Off
                                        (0037) 
                                        (0038) export _BP6_Switch
                                        (0039) export  BP6_Switch
                                        (0040) 
                                        (0041) export _BP6_Invert
                                        (0042) export  BP6_Invert
                                        (0043) 
                                        (0044) export _BP6_GetState
                                        (0045) export  BP6_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: BP6_Start(void)
                                        (0054) ;  FUNCTION NAME: BP6_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: BP6_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _BP6_On:
                                        (0079)  BP6_On:
02B8: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02BA: 80 03    JMP   _BP6_Switch        (0081)    jmp  BP6_Switch 
                                        (0082) 
                                        (0083) _BP6_Start:
                                        (0084)  BP6_Start:
                                        (0085) _BP6_Stop:
                                        (0086)  BP6_Stop:
                                        (0087) _BP6_Off:
                                        (0088)  BP6_Off:
02BC: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _BP6_Switch:
                                        (0092)  BP6_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02BE: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02C0: A0 06    JZ    0x02C7             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_0_Data_SHADE],BP6_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
02C2: 26 02 FB AND   [0x2],0xFB         (0104)    and  [Port_0_Data_SHADE],~BP6_PinMask
                                        (0105) ENDIF
02C5: 80 04    JMP   0x02CA             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_0_Data_SHADE],~BP6_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
02C7: 2E 02 04 OR    [0x2],0x4          (0112)    or   [Port_0_Data_SHADE],BP6_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02CA: 51 02    MOV   A,[0x2]            (0116)    mov  A,[Port_0_Data_SHADE]
02CC: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[BP6_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02CE: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: BP6_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _BP6_Invert:
                                        (0144)  BP6_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02CF: 36 02 04 XOR   [0x2],0x4          (0149)    xor  [Port_0_Data_SHADE],BP6_PinMask
02D2: 51 02    MOV   A,[0x2]            (0150)    mov  A,[Port_0_Data_SHADE]
02D4: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[BP6_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02D6: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: BP6_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _BP6_GetState:
                                        (0177)  BP6_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
02D7: 51 02    MOV   A,[0x2]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
02D9: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
02DA: 21 04    AND   A,0x4              (0188)    and   A,BP6_PinMask                 ; Mask off the trash
02DC: A0 03    JZ    0x02E0             (0189)    jz    .End_LED_GS                   ; If zero, we're done
02DE: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
02E0: 7F       RET                      (0195)    ret
FILE: lib\bp4.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   BP4.asm
                                        (0004) ;;  Version: 1.40, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "BP4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _BP4_Start
                                        (0027) export  BP4_Start
                                        (0028) 
                                        (0029) export _BP4_Stop
                                        (0030) export  BP4_Stop
                                        (0031) 
                                        (0032) export _BP4_On
                                        (0033) export  BP4_On
                                        (0034) 
                                        (0035) export _BP4_Off
                                        (0036) export  BP4_Off
                                        (0037) 
                                        (0038) export _BP4_Switch
                                        (0039) export  BP4_Switch
                                        (0040) 
                                        (0041) export _BP4_Invert
                                        (0042) export  BP4_Invert
                                        (0043) 
                                        (0044) export _BP4_GetState
                                        (0045) export  BP4_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: BP4_Start(void)
                                        (0054) ;  FUNCTION NAME: BP4_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: BP4_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _BP4_On:
                                        (0079)  BP4_On:
02E1: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
02E3: 80 03    JMP   _BP4_Switch        (0081)    jmp  BP4_Switch 
                                        (0082) 
                                        (0083) _BP4_Start:
                                        (0084)  BP4_Start:
                                        (0085) _BP4_Stop:
                                        (0086)  BP4_Stop:
                                        (0087) _BP4_Off:
                                        (0088)  BP4_Off:
02E5: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _BP4_Switch:
                                        (0092)  BP4_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0096) 
02E7: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
02E9: A0 06    JZ    0x02F0             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_0_Data_SHADE],BP4_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
02EB: 26 02 BF AND   [0x2],0xBF         (0104)    and  [Port_0_Data_SHADE],~BP4_PinMask
                                        (0105) ENDIF
02EE: 80 04    JMP   0x02F3             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_0_Data_SHADE],~BP4_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
02F0: 2E 02 40 OR    [0x2],0x40         (0112)    or   [Port_0_Data_SHADE],BP4_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
02F3: 51 02    MOV   A,[0x2]            (0116)    mov  A,[Port_0_Data_SHADE]
02F5: 60 00    MOV   REG[0x0],A         (0117)    mov  reg[BP4_PortDR],A
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
02F7: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: BP4_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _BP4_Invert:
                                        (0144)  BP4_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0148) 
02F8: 36 02 40 XOR   [0x2],0x40         (0149)    xor  [Port_0_Data_SHADE],BP4_PinMask
02FB: 51 02    MOV   A,[0x2]            (0150)    mov  A,[Port_0_Data_SHADE]
02FD: 60 00    MOV   REG[0x0],A         (0151)    mov  reg[BP4_PortDR],A
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
02FF: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: BP4_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _BP4_GetState:
                                        (0177)  BP4_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0181) 
0300: 51 02    MOV   A,[0x2]            (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
0302: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0303: 21 40    AND   A,0x40             (0188)    and   A,BP4_PinMask                 ; Mask off the trash
0305: A0 03    JZ    0x0309             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0307: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0309: 7F       RET                      (0195)    ret
FILE: C:\Users\Claude\Desktop\INTERF~1\INTERF~1\INTERF~1\INTERF~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #define LED1 0x01       // P0_0 
(0008) #define LED2 0x10		// P1_4
(0009) #define LED3 0x04		// P1_2
(0010) void Tempo(long);
(0011) void init(void);
(0012) void main(void)
(0013) {
__UserModules_end|__text_start|_main|_main:
  val                  --> X+0
    030A: 10       PUSH  X
    030B: 4F       MOV   X,SP
    030C: 38 01    ADD   SP,0x1
(0014) unsigned char val;
(0015) //M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0016) init();
    030E: 90 C2    CALL  _init
    0310: 80 7E    JMP   0x038F
(0017) while(1){
(0018) 	if((SPIS_1_bReadStatus() & SPIS_1_SPIS_RX_BUFFER_FULL)==SPIS_1_SPIS_RX_BUFFER_FULL){
    0312: 10       PUSH  X
    0313: 7C 02 54 LCALL SPIS_1_bReadStatus|bSPIS_1_ReadStatus|_SPIS_1_bReadStatus|_bSPIS_1_ReadStatus
    0316: 20       POP   X
    0317: 21 08    AND   A,0x8
    0319: 39 08    CMP   A,0x8
    031B: B0 43    JNZ   0x035F
(0019) 	val=SPIS_1_bReadRxData();
    031D: 10       PUSH  X
    031E: 7C 02 51 LCALL bSPIS_1_ReadRxData|_SPIS_1_bReadRxData|_bSPIS_1_ReadRxData|SPIS_1_bReadRxData
    0321: 20       POP   X
    0322: 54 00    MOV   [X+0],A
(0020) 	 	if (val=='U')
    0324: 3D 00 55 CMP   [X+0],0x55
    0327: B0 0A    JNZ   0x0332
(0021) 		BP4_Switch(1);
    0329: 10       PUSH  X
    032A: 50 01    MOV   A,0x1
    032C: 7C 02 E7 LCALL _BP4_Switch
    032F: 20       POP   X
    0330: 80 2E    JMP   0x035F
(0022) 		else if(val=='D')
    0332: 3D 00 44 CMP   [X+0],0x44
    0335: B0 0A    JNZ   0x0340
(0023) 		BP6_Switch(1);
    0337: 10       PUSH  X
    0338: 50 01    MOV   A,0x1
    033A: 7C 02 BE LCALL _BP6_Switch
    033D: 20       POP   X
    033E: 80 20    JMP   0x035F
(0024) 		else if(val=='P')
    0340: 3D 00 50 CMP   [X+0],0x50
    0343: B0 0A    JNZ   0x034E
(0025) 		BP7_Switch(1);
    0345: 10       PUSH  X
    0346: 50 01    MOV   A,0x1
    0348: 7C 02 95 LCALL _BP7_Switch
    034B: 20       POP   X
    034C: 80 12    JMP   0x035F
(0026) 		else {
(0027) 		BP4_Switch(0);
    034E: 10       PUSH  X
    034F: 50 00    MOV   A,0x0
    0351: 7C 02 E7 LCALL _BP4_Switch
(0028) 		BP6_Switch(0);
    0354: 50 00    MOV   A,0x0
    0356: 7C 02 BE LCALL _BP6_Switch
(0029) 		BP7_Switch(0);
    0359: 50 00    MOV   A,0x0
    035B: 7C 02 95 LCALL _BP7_Switch
    035E: 20       POP   X
(0030) 			}
(0031) 		}
(0032) 	//if ((PRT0DR | ~LED1)== ~LED1)
(0033) 	//SPIS_1_SetupTxData('A');
(0034) 	 if ((PRT0DR & LED1)== LED1)
    035F: 5D 00    MOV   A,REG[0x0]
    0361: 21 01    AND   A,0x1
    0363: 39 01    CMP   A,0x1
    0365: B0 0A    JNZ   0x0370
(0035) 	SPIS_1_SetupTxData('a');
    0367: 10       PUSH  X
    0368: 50 61    MOV   A,0x61
    036A: 7C 02 4E LCALL _SPIS_1_SetupTxData
    036D: 20       POP   X
    036E: 80 08    JMP   0x0377
(0036) 	else 
(0037) 	 SPIS_1_SetupTxData('A');
    0370: 10       PUSH  X
    0371: 50 41    MOV   A,0x41
    0373: 7C 02 4E LCALL _SPIS_1_SetupTxData
    0376: 20       POP   X
(0038) 	//else if ((PRT1DR | ~LED2)== ~LED2)
(0039) 	//SPIS_1_SetupTxData('B');
(0040) 	//else if ((PRT0DR & LED2)== LED2)
(0041) 	//SPIS_1_SetupTxData('b');	
(0042) 	//if ((PRT1DR | ~LED3)== ~LED3)
(0043) 	//SPIS_1_SetupTxData('C');
(0044) 	 if ((PRT1DR & LED3)== LED3)
    0377: 5D 04    MOV   A,REG[0x4]
    0379: 21 04    AND   A,0x4
    037B: 39 04    CMP   A,0x4
    037D: B0 0A    JNZ   0x0388
(0045) 	SPIS_1_SetupTxData('c');
    037F: 10       PUSH  X
    0380: 50 63    MOV   A,0x63
    0382: 7C 02 4E LCALL _SPIS_1_SetupTxData
    0385: 20       POP   X
    0386: 80 08    JMP   0x038F
(0046) 	else 
(0047) 	SPIS_1_SetupTxData('C');
    0388: 10       PUSH  X
    0389: 50 43    MOV   A,0x43
    038B: 7C 02 4E LCALL _SPIS_1_SetupTxData
    038E: 20       POP   X
(0048) 	}
    038F: 8F 82    JMP   0x0312
    0391: 38 FF    ADD   SP,0xFF
    0393: 20       POP   X
    0394: 8F FF    JMP   0x0394
(0049) }
(0050) /******************tempo***********************/
(0051) void Tempo(long val){
_Tempo:
  i                    --> X+0
  val                  --> X-7
    0396: 10       PUSH  X
    0397: 4F       MOV   X,SP
    0398: 38 04    ADD   SP,0x4
(0052) long i;
(0053) for (i=0;i<val;i++);
    039A: 56 00 00 MOV   [X+0],0x0
    039D: 56 01 00 MOV   [X+1],0x0
    03A0: 56 02 00 MOV   [X+2],0x0
    03A3: 56 03 00 MOV   [X+3],0x0
    03A6: 80 0D    JMP   0x03B4
    03A8: 07 03 01 ADD   [X+3],0x1
    03AB: 0F 02 00 ADC   [X+2],0x0
    03AE: 0F 01 00 ADC   [X+1],0x0
    03B1: 0F 00 00 ADC   [X+0],0x0
    03B4: 52 03    MOV   A,[X+3]
    03B6: 13 FC    SUB   A,[X-4]
    03B8: 52 02    MOV   A,[X+2]
    03BA: 1B FB    SBB   A,[X-5]
    03BC: 52 01    MOV   A,[X+1]
    03BE: 1B FA    SBB   A,[X-6]
    03C0: 52 F9    MOV   A,[X-7]
    03C2: 31 80    XOR   A,0x80
    03C4: 53 00    MOV   [__rX],A
    03C6: 52 00    MOV   A,[X+0]
    03C8: 31 80    XOR   A,0x80
    03CA: 1A 00    SBB   A,[__rX]
    03CC: CF DB    JC    0x03A8
    03CE: 38 FC    ADD   SP,0xFC
    03D0: 20       POP   X
    03D1: 7F       RET   
(0054) }
(0055) /********************initialisation*********************/
(0056) void init(void){
(0057) SPIS_1_Start(SPIS_1_SPIS_MODE_0 | SPIS_1_SPIS_MSB_FIRST);
_init:
    03D2: 10       PUSH  X
    03D3: 50 00    MOV   A,0x0
    03D5: 7C 02 45 LCALL _SPIS_1_Start
(0058)  ONOFF_Start(); 
    03D8: 7C 02 6B LCALL _ONOFF_Start|ONOFF_Stop|ONOFF_Start|_ONOFF_Off|ONOFF_Off|_ONOFF_Stop
(0059)  BP4_Start();
    03DB: 7C 02 E5 LCALL BP4_Start|BP4_Off|BP4_Stop|_BP4_Off|_BP4_Stop|_BP4_Start
(0060)  BP6_Start();
    03DE: 7C 02 BC LCALL BP6_Start|BP6_Off|_BP6_Start|_BP6_Off|BP6_Stop|_BP6_Stop
(0061)  BP7_Start();
    03E1: 7C 02 93 LCALL _BP7_Start|_BP7_Stop|BP7_Off|BP7_Start|_BP7_Off|BP7_Stop
    03E4: 20       POP   X
(0062) Tempo(10000);
    03E5: 50 00    MOV   A,0x0
    03E7: 08       PUSH  A
    03E8: 08       PUSH  A
    03E9: 50 27    MOV   A,0x27
    03EB: 08       PUSH  A
    03EC: 50 10    MOV   A,0x10
    03EE: 08       PUSH  A
    03EF: 9F A5    CALL  _Tempo
    03F1: 38 FC    ADD   SP,0xFC
(0063) SPIS_1_EnableSS();
    03F3: 10       PUSH  X
    03F4: 7C 02 5F LCALL _SPIS_1_EnableSS|_SPIS_1_ClearSS|SPIS_1_ClearSS
(0064)  ONOFF_Switch(1); // stiimsound ON
    03F7: 50 01    MOV   A,0x1
    03F9: 7C 02 6D LCALL _ONOFF_Switch
    03FC: 20       POP   X
(0065) Tempo(50000);
    03FD: 50 00    MOV   A,0x0
    03FF: 08       PUSH  A
    0400: 08       PUSH  A
    0401: 50 C3    MOV   A,0xC3
    0403: 08       PUSH  A
    0404: 50 50    MOV   A,0x50
    0406: 08       PUSH  A
    0407: 9F 8D    CALL  _Tempo
    0409: 38 FC    ADD   SP,0xFC
(0066)  ONOFF_Switch(0); // stiimsound ON
    040B: 10       PUSH  X
(0067) }
(0068) 
(0069) 
    040C: 50 00    MOV   A,0x0
    040E: 7C 02 6D LCALL _ONOFF_Switch
    0411: 20       POP   X
    0412: 7F       RET   
